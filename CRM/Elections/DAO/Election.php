<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from au.com.agileware.elections/xml/schema/CRM/Elections/Election.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:fe289f241c1f1a74b9402205596de340)
 */
use CRM_Elections_ExtensionUtil as E;

/**
 * Database access object for the Election entity.
 */
class CRM_Elections_DAO_Election extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '5.3';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_election';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique Election ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Name of the election.
   *
   * @var string|null
   *   (SQL type: varchar(255))
   *   Note that values will be retrieved from the database as a string.
   */
  public $name;

  /**
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $description;

  /**
   * Election visibility start date
   *
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $visibility_start_date;

  /**
   * Election visibility end date
   *
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $visibility_end_date;

  /**
   * Election nomination start date
   *
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $nomination_start_date;

  /**
   * Election nomination end date
   *
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $nomination_end_date;

  /**
   * Date from when candidates are available for viewing.
   *
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $advertise_candidates_date;

  /**
   * Election voting start date
   *
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $voting_start_date;

  /**
   * Election voting end date
   *
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $voting_end_date;

  /**
   * Election result date, after this date election results are published.
   *
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $result_date;

  /**
   * Election result status,  for admins to manage election result visibility manually.
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $result_status;

  /**
   * Boolean field to soft delete an election.
   *
   * @var bool|string|null
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_deleted;

  /**
   * Boolean field to set if election is visible or not.
   *
   * @var bool|string|null
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $is_visible;

  /**
   * Boolean field to set if results are generated.
   *
   * @var bool|string|null
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $has_results_generated;

  /**
   * Boolean field to anonymize votes when results are generated.
   *
   * @var bool|string|null
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $anonymize_votes;

  /**
   * Number of required nominations to become eligible candidate.
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $required_nominations;

  /**
   * Boolean field to set if members are allowed to re-vote in election.
   *
   * @var bool|string|null
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $allow_revote;

  /**
   * List of groups, members of it are allowed to participate in election.
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $allowed_groups;

  /**
   * Date on which election created.
   *
   * @var string|null
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $created_at;

  /**
   * Date on which election was updated.
   *
   * @var string
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $updated_at;

  /**
   * FK to Contact who created particular election
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $created_by;

  /**
   * System name of the election.
   *
   * @var string
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $system;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_election';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Elections') : E::ts('Election');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'created_by', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique Election ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_election.id',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => '5.3',
        ],
        'name' => [
          'name' => 'name',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Name'),
          'description' => E::ts('Name of the election.'),
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.name',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '5.3',
        ],
        'description' => [
          'name' => 'description',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Description'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.description',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '5.3',
        ],
        'visibility_start_date' => [
          'name' => 'visibility_start_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Visibility Start Date'),
          'description' => E::ts('Election visibility start date'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.visibility_start_date',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
          'add' => '5.3',
        ],
        'visibility_end_date' => [
          'name' => 'visibility_end_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Visibility End Date'),
          'description' => E::ts('Election visibility end date'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.visibility_end_date',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
          'add' => '5.3',
        ],
        'nomination_start_date' => [
          'name' => 'nomination_start_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Nomination Start Date'),
          'description' => E::ts('Election nomination start date'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.nomination_start_date',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
          'add' => '5.3',
        ],
        'nomination_end_date' => [
          'name' => 'nomination_end_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Nomination End Date'),
          'description' => E::ts('Election nomination end date'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.nomination_end_date',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
          'add' => '5.3',
        ],
        'advertise_candidates_date' => [
          'name' => 'advertise_candidates_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Advertise Candidates Date'),
          'description' => E::ts('Date from when candidates are available for viewing.'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.advertise_candidates_date',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
          'add' => '5.3',
        ],
        'voting_start_date' => [
          'name' => 'voting_start_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Voting Start Date'),
          'description' => E::ts('Election voting start date'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.voting_start_date',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
          'add' => '5.3',
        ],
        'voting_end_date' => [
          'name' => 'voting_end_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Voting End Date'),
          'description' => E::ts('Election voting end date'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.voting_end_date',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
          'add' => '5.3',
        ],
        'result_date' => [
          'name' => 'result_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Result Date'),
          'description' => E::ts('Election result date, after this date election results are published.'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.result_date',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select Date',
            'formatType' => 'birth',
          ],
          'add' => '5.3',
        ],
        'result_status' => [
          'name' => 'result_status',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Result Status'),
          'description' => E::ts('Election result status,  for admins to manage election result visibility manually.'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.result_status',
          'export' => TRUE,
          'default' => '0',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'add' => '5.3',
        ],
        'is_deleted' => [
          'name' => 'is_deleted',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Is Deleted'),
          'description' => E::ts('Boolean field to soft delete an election.'),
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_election.is_deleted',
          'export' => TRUE,
          'default' => '0',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => '5.3',
        ],
        'is_visible' => [
          'name' => 'is_visible',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Is Visible'),
          'description' => E::ts('Boolean field to set if election is visible or not.'),
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_election.is_visible',
          'export' => TRUE,
          'default' => '0',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => '5.3',
        ],
        'has_results_generated' => [
          'name' => 'has_results_generated',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Has Results Generated'),
          'description' => E::ts('Boolean field to set if results are generated.'),
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_election.has_results_generated',
          'export' => TRUE,
          'default' => '0',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => '5.3',
        ],
        'anonymize_votes' => [
          'name' => 'anonymize_votes',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Anonymize Votes'),
          'description' => E::ts('Boolean field to anonymize votes when results are generated.'),
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_election.anonymize_votes',
          'export' => TRUE,
          'default' => '1',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => '5.3',
        ],
        'required_nominations' => [
          'name' => 'required_nominations',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Required Nominations'),
          'description' => E::ts('Number of required nominations to become eligible candidate.'),
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.required_nominations',
          'export' => TRUE,
          'default' => '2',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => '5.3',
        ],
        'allow_revote' => [
          'name' => 'allow_revote',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Allow Revote'),
          'description' => E::ts('Boolean field to set if members are allowed to re-vote in election.'),
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_election.allow_revote',
          'export' => TRUE,
          'default' => '0',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'CheckBox',
          ],
          'add' => '5.3',
        ],
        'allowed_groups' => [
          'name' => 'allowed_groups',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Allowed Groups'),
          'description' => E::ts('List of groups, members of it are allowed to participate in election.'),
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_election.allowed_groups',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select2',
          ],
          'add' => '5.3',
        ],
        'created_at' => [
          'name' => 'created_at',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Created At'),
          'description' => E::ts('Date on which election created.'),
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_election.created_at',
          'export' => TRUE,
          'default' => 'CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'add' => '5.3',
        ],
        'updated_at' => [
          'name' => 'updated_at',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Updated At'),
          'description' => E::ts('Date on which election was updated.'),
          'required' => FALSE,
          'usage' => [
            'import' => FALSE,
            'export' => TRUE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_election.updated_at',
          'export' => TRUE,
          'default' => 'CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'add' => '5.3',
        ],
        'created_by' => [
          'name' => 'created_by',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Created By'),
          'description' => E::ts('FK to Contact who created particular election'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_election.created_by',
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'add' => '5.3',
        ],
        'system' => [
          'name' => 'system',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('System'),
          'description' => E::ts('System name of the election.'),
          'required' => TRUE,
          'usage' => [
            'import' => TRUE,
            'export' => TRUE,
            'duplicate_matching' => TRUE,
            'token' => FALSE,
          ],
          'import' => TRUE,
          'where' => 'civicrm_election.system',
          'export' => TRUE,
          'table_name' => 'civicrm_election',
          'entity' => 'Election',
          'bao' => 'CRM_Elections_DAO_Election',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'add' => '5.3',
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'election', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'election', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
